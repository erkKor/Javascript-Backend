
// let name: any      //standard i javascript
// let name: unknown   
// let name: string
// let placement: number|string      // union  inte vanlig
// let skills: string[] = []
// let roles: [number, string]       // tuple  inte vanlig
// -------------------------------------------------------------------------------
// type vs. interface           (OOP: encapsulation, inheritance, polymorphism, abstraction)
// ?      nullable dvs. den får vara tom och är valbar 

// type = alias för ett interface
// interface = ett kontrakt (Rekommenderas)

// class = alias för en funktion
// function

// type Person = {
//   name: string,
//   age: number,
//   nickName?: string
// }
// type Student = Person & {
//   studentNumber: number
// }

// interface IPerson {
//   name: string,
//   age: number,
//   nickName?: string
// }
// interface IStudent extends IPerson {
//   studentNumber: number
// }

// type addToCart1 = () => void
// type addToCart2 = () => never
// type addToCart3 = () => number

// interface IShoppingCart {
//   increment: (articleNumber:string) => void
//   decrement: (articleNumber:string ) => void
//   remove: (articleNumber:string) => void
//   totalAmount: () => number  //totalAmount är en function som kommer returnera ett nummer
//   totalQuantity: () => number
// }

// interface IProductItem {
//   articleNumber: string,
//   name: string,
//   description?: string,
//   price: number,
// }


// interface ICartItem{
//   articleNumber: number
//   item: IProductItem
//   quantity: number
// }
